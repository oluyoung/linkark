// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../.db/db.sqlite"
}

model User {
  id String @id @default(uuid())
  name String
  email String
  emailVerified DateTime?
  createdAt DateTime @default(now())
  links Link[]
  lists List[] @relation("creator")
  editingLists List[] @relation("editor")
  subcribedLists List[] @relation("subscriber")
  accounts Account[]

  @@unique([email])
  @@map("user")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Link {
  id String @id @default(cuid())
  hostname String
  origin String
  path String
  title String?
  description String?
  ogTitle String? // used if no title
  ogDescription String? // used if no description
  ogType String? // can be used to display image if product or sth like it or fun icons to denote the type, ?and can also be used to group products?
  ogUrl String?
  query String?
  rawUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists List[]
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String

  @@unique([origin, path, query])
  @@index([hostname, origin])
}

model List {
  id String @id @default(cuid())
  name String
  public Boolean @default(false)
  links Link[]
  editors User[] @relation("editor")
  subscribers User[] @relation("subscriber")
  creator User @relation("creator", fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime                                                                                                                                                                                                                                                                                                             @default(now())
  updatedAt DateTime @updatedAt
}

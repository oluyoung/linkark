// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url = "mongodb+srv://tr3vryng:MUe_Qs9uCRkC@cluster0.agha6ya.mongodb.net/linkark?retryWrites=true&w=majority&appName=Cluster0" // uses connection pooling
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  email String @unique
  emailVerified DateTime?
  createdAt DateTime @default(now())
  links Link[]
  lists List[] @relation("creator")
  editingLists ListEditor[]
  subscribedLists ListSubscriber[]
  accounts Account[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Link {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  hostname String
  origin String
  path String
  title String?
  description String?
  ogTitle String? // used if no title
  ogDescription String? // used if no description
  ogType String? // can be used to display image if product or sth like it or fun icons to denote the type? and can also be used to group products?
  ogUrl String?
  query String?
  rawUrl String
  rawUrlHash String
  isDeleted Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list ListLink[]
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @db.ObjectId

  @@unique([rawUrlHash, creatorId])
  @@index([hostname, origin])
  @@fulltext([title, description, ogDescription, ogTitle, rawUrl])
}

model List {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  isPublic Boolean @default(false)
  links ListLink[]
  editors ListEditor[]
  subscribers ListSubscriber[]
  creator User @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @db.ObjectId
  createdAt DateTime                                                                                                                                                                                                                                                                                                             @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, creatorId, isPublic])
  @@fulltext([name, description])
}

model ListLink {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  link Link @relation(fields: [linkId], references: [id])
  linkId String @db.ObjectId
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String @db.ObjectId

  @@unique([linkId, listId])
}

model ListEditor {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  editor User @relation(fields: [editorId], references: [id])
  editorId String @db.ObjectId
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String @db.ObjectId

  @@unique([editorId, listId])
}

model ListSubscriber {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  subscriber User @relation(fields: [subscriberId], references: [id])
  subscriberId String @db.ObjectId
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String @db.ObjectId

  @@unique([subscriberId, listId])
}
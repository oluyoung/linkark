// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("MYSQL_URL") // uses connection pooling
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  emailVerified DateTime?
  createdAt DateTime @default(now())
  links Link[]
  lists List[] @relation("creator")
  editingLists ListEditor[]
  subcribedLists ListSubscriber[]
  accounts Account[]

  @@map("user")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Link {
  id String @id @default(cuid())
  hostname String
  origin String
  path String @db.TinyText
  title String?
  description String? @db.Text
  ogTitle String? // used if no title
  ogDescription String? @db.Text // used if no description
  ogType String? // can be used to display image if product or sth like it or fun icons to denote the type? and can also be used to group products?
  ogUrl String? @db.Text
  query String? @db.Text
  rawUrl String @db.Text
  rawUrlHash String
  isDeleted Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list ListLink[]
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String

  @@unique([rawUrlHash, creatorId])
  @@index([hostname, origin])
}

model List {
  id String @id @default(cuid())
  name String
  description String? @db.Text
  isPublic Boolean @default(false)
  links ListLink[]
  editors ListEditor[]
  subscribers ListSubscriber[]
  creator User @relation("creator", fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime                                                                                                                                                                                                                                                                                                             @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, creatorId, isPublic])
}

model ListLink {
  id String @id @default(cuid())
  link Link @relation(fields: [linkId], references: [id])
  linkId String
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  @@unique([linkId, listId])
  @@index([linkId, listId])
}

model ListEditor {
  id String @id @default(cuid())
  editor User @relation(fields: [editorId], references: [id])
  editorId String
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  @@unique([editorId, listId])
  @@index([editorId, listId])
}

model ListSubscriber {
  id String @id @default(cuid())
  subscriber User @relation(fields: [subscriberId], references: [id])
  subscriberId String
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  @@unique([subscriberId, listId])
  @@index([subscriberId, listId])
}